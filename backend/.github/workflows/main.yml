
# This basic workflow will build a docker container, publish it to GitHub Registry
# Possible improvement:
# Automatic deployment to any PaaS (Google/AWS/Azure) can be added by uncommenting / configuring final step Deploy
# In the following example sample deploy to GKE (Google Container Registry) is provided for demonstration

name: deploy

on: push

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IMAGE: docker.pkg.github.com/basilboli/sg/api

jobs:
  setup-test-build-publish-deploy:
    name: Setup, Test, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    # Checkout latest master
    - name: Checkout
      uses: actions/checkout@master    

    # Run integration tests
    - name: Test
      run: docker-compose -f docker-compose.test.yml up --abort-on-container-exit
    
    # Build image
    - name: Build
      run: |
        docker build --file Dockerfile -t $IMAGE:$GITHUB_SHA .
    
    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $IMAGE:$GITHUB_SHA
      # Deploy the Docker image as Github package

    # - name: Deploy
    #   run: |
    #     gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
    #     kubectl set image --record deployment/sg-api sg-api=eu.gcr.io/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}
    #     kubectl rollout status deployment/sg-api
    #     kubectl get services -o wide%      